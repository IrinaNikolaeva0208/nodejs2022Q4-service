openapi: 3.0.0
info:
  title: Home Library Service
  description: Home music library service
  version: 1.0.0

servers:
  - url: /

paths:
  /user/admin:
    {
      post:
        {
          operationId: UsersController_createAdmin,
          parameters: [],
          responses:
            {
              '201':
                {
                  description: 'Successfully created',
                  content:
                    {
                      application/json:
                        { schema: { $ref: '#/components/schemas/User' } },
                    },
                },
            },
          tags: [users],
        },
    }
  /user:
    {
      get:
        {
          operationId: UsersController_getAllUsers,
          parameters: [],
          responses:
            {
              '200':
                {
                  description: 'Successful operation',
                  content:
                    {
                      application/json:
                        {
                          schema:
                            {
                              type: array,
                              items: { $ref: '#/components/schemas/User' },
                            },
                        },
                    },
                },
              '401': { description: Unauthorized },
              '403': { description: 'Operation forbidden' },
            },
          tags: [users],
          security: [{ bearer: [] }],
        },
    }
  '/user/{id}':
    {
      get:
        {
          operationId: UsersController_getUserById,
          parameters:
            [{ name: id, required: true, in: path, schema: { type: string } }],
          responses:
            {
              '200':
                {
                  description: 'Successful operation',
                  content:
                    {
                      application/json:
                        { schema: { $ref: '#/components/schemas/User' } },
                    },
                },
              '400': { description: 'Invalid id' },
              '401': { description: Unauthorized },
              '403': { description: 'Operation forbidden' },
              '404': { description: 'User not found' },
            },
          tags: [users],
          security: [{ bearer: [] }],
        },
      put:
        {
          operationId: UsersController_updateUser,
          parameters:
            [{ name: id, required: true, in: path, schema: { type: string } }],
          requestBody:
            {
              required: true,
              content:
                {
                  application/json:
                    {
                      schema:
                        { $ref: '#/components/schemas/UpdatePasswordDto' },
                    },
                },
            },
          responses:
            {
              '200':
                {
                  description: 'Successfully updated',
                  content:
                    {
                      application/json:
                        { schema: { $ref: '#/components/schemas/User' } },
                    },
                },
              '400': { description: 'Invalid id or dto' },
              '401': { description: Unauthorized },
              '404': { description: 'Track not found' },
            },
          tags: [users],
          security: [{ bearer: [] }],
        },
      delete:
        {
          operationId: UsersController_deleteUser,
          parameters:
            [{ name: id, required: true, in: path, schema: { type: string } }],
          responses:
            {
              '204': { description: 'Successfully deleted' },
              '400': { description: 'Invalid id' },
              '401': { description: Unauthorized },
              '403': { description: 'Operation forbidden' },
              '404': { description: 'User not found' },
            },
          tags: [users],
          security: [{ bearer: [] }],
        },
    }
  /favs:
    {
      get:
        {
          operationId: FavsController_getFavs,
          parameters: [],
          requestBody:
            {
              required: true,
              content:
                {
                  application/json:
                    { schema: { $ref: '#/components/schemas/FindFavsDto' } },
                },
            },
          responses:
            {
              '200':
                {
                  description: 'Successful operation',
                  content:
                    {
                      application/json:
                        { schema: { $ref: '#/components/schemas/Favourites' } },
                    },
                },
              '401': { description: Unauthorized },
              '403': { description: 'Operation forbidden' },
            },
          tags: [favourites],
          security: [{ bearer: [] }],
        },
    }
  '/favs/track/{id}':
    {
      post:
        {
          operationId: FavsController_addTrackToFavs,
          parameters:
            [{ name: id, required: true, in: path, schema: { type: string } }],
          requestBody:
            {
              required: true,
              content:
                {
                  application/json:
                    { schema: { $ref: '#/components/schemas/FindFavsDto' } },
                },
            },
          responses:
            {
              '201': { description: 'Successfully added to favourites' },
              '400': { description: 'Invalid id' },
              '401': { description: Unauthorized },
              '403': { description: 'Operation forbidden' },
              '422': { description: 'Track does not exist' },
            },
          tags: [favourites],
          security: [{ bearer: [] }],
        },
      delete:
        {
          operationId: FavsController_deleteTrackFromFavs,
          parameters:
            [{ name: id, required: true, in: path, schema: { type: string } }],
          requestBody:
            {
              required: true,
              content:
                {
                  application/json:
                    { schema: { $ref: '#/components/schemas/FindFavsDto' } },
                },
            },
          responses:
            {
              '204': { description: 'Successfully deleted from favourites' },
              '400': { description: 'Invalid id' },
              '401': { description: Unauthorized },
              '403': { description: 'Operation forbidden' },
              '404': { description: 'Track is not favourite' },
            },
          tags: [favourites],
          security: [{ bearer: [] }],
        },
    }
  '/favs/artist/{id}':
    {
      post:
        {
          operationId: FavsController_addArtistToFavs,
          parameters:
            [{ name: id, required: true, in: path, schema: { type: string } }],
          requestBody:
            {
              required: true,
              content:
                {
                  application/json:
                    { schema: { $ref: '#/components/schemas/FindFavsDto' } },
                },
            },
          responses:
            {
              '201': { description: 'Successfully added to favourites' },
              '400': { description: 'Invalid id' },
              '401': { description: Unauthorized },
              '403': { description: 'Operation forbidden' },
              '422': { description: 'Artist does not exist' },
            },
          tags: [favourites],
          security: [{ bearer: [] }],
        },
      delete:
        {
          operationId: FavsController_deleteArtistFromFavs,
          parameters:
            [{ name: id, required: true, in: path, schema: { type: string } }],
          requestBody:
            {
              required: true,
              content:
                {
                  application/json:
                    { schema: { $ref: '#/components/schemas/FindFavsDto' } },
                },
            },
          responses:
            {
              '204': { description: 'Successfully deleted from favourites' },
              '400': { description: 'Invalid id' },
              '401': { description: Unauthorized },
              '403': { description: 'Operation forbidden' },
              '404': { description: 'Artist is not favourite' },
            },
          tags: [favourites],
          security: [{ bearer: [] }],
        },
    }
  '/favs/album/{id}':
    {
      post:
        {
          operationId: FavsController_addAlbumToFavs,
          parameters:
            [{ name: id, required: true, in: path, schema: { type: string } }],
          requestBody:
            {
              required: true,
              content:
                {
                  application/json:
                    { schema: { $ref: '#/components/schemas/FindFavsDto' } },
                },
            },
          responses:
            {
              '201': { description: 'Successfully added to favourites' },
              '400': { description: 'Invalid id' },
              '401': { description: Unauthorized },
              '403': { description: 'Operation forbidden' },
              '422': { description: 'Album does not exist' },
            },
          tags: [favourites],
          security: [{ bearer: [] }],
        },
      delete:
        {
          operationId: FavsController_deleteAlbumFromFavs,
          parameters:
            [{ name: id, required: true, in: path, schema: { type: string } }],
          requestBody:
            {
              required: true,
              content:
                {
                  application/json:
                    { schema: { $ref: '#/components/schemas/FindFavsDto' } },
                },
            },
          responses:
            {
              '204': { description: 'Successfully deleted from favourites' },
              '400': { description: 'Invalid id' },
              '401': { description: Unauthorized },
              '403': { description: 'Operation forbidden' },
              '404': { description: 'Album is not favourite' },
            },
          tags: [favourites],
          security: [{ bearer: [] }],
        },
    }
  /album:
    {
      get:
        {
          operationId: AlbumsController_getAllEntities,
          parameters: [],
          responses:
            {
              '200':
                {
                  description: 'Successful operation',
                  content:
                    {
                      application/json:
                        {
                          schema:
                            {
                              type: array,
                              items: { $ref: '#/components/schemas/Album' },
                            },
                        },
                    },
                },
              '401': { description: Unauthorized },
            },
          tags: [albums],
          security: [{ bearer: [] }],
        },
      post:
        {
          operationId: AlbumsController_createAlbum,
          parameters: [],
          requestBody:
            {
              required: true,
              content:
                {
                  application/json:
                    { schema: { $ref: '#/components/schemas/AlbumDto' } },
                },
            },
          responses:
            {
              '201':
                {
                  description: 'Successfully created',
                  content:
                    {
                      application/json:
                        {
                          schema:
                            {
                              type: array,
                              items: { $ref: '#/components/schemas/Album' },
                            },
                        },
                    },
                },
              '400': { description: 'Invalid dto' },
              '401': { description: Unauthorized },
              '403': { description: 'Operation forbidden' },
            },
          tags: [albums],
          security: [{ bearer: [] }],
        },
    }
  /album/search:
    {
      get:
        {
          operationId: AlbumsController_getAlbumsByName,
          parameters:
            [
              {
                name: name,
                required: true,
                in: query,
                description: 'Name of the album',
                schema: { type: string },
              },
            ],
          responses:
            {
              '200':
                {
                  description: 'Successful operation',
                  content:
                    {
                      application/json:
                        {
                          schema:
                            {
                              type: array,
                              items: { $ref: '#/components/schemas/Album' },
                            },
                        },
                    },
                },
              '401': { description: Unauthorized },
            },
          tags: [albums],
          security: [{ bearer: [] }],
        },
    }
  '/album/{id}':
    {
      get:
        {
          operationId: AlbumsController_getAlbumById,
          parameters:
            [{ name: id, required: true, in: path, schema: { type: string } }],
          responses:
            {
              '200':
                {
                  description: 'Successful operation',
                  content:
                    {
                      application/json:
                        {
                          schema:
                            {
                              type: array,
                              items: { $ref: '#/components/schemas/Album' },
                            },
                        },
                    },
                },
              '400': { description: 'Invalid id' },
              '401': { description: Unauthorized },
              '404': { description: 'Album not found' },
            },
          tags: [albums],
          security: [{ bearer: [] }],
        },
      put:
        {
          operationId: AlbumsController_updateAlbum,
          parameters:
            [{ name: id, required: true, in: path, schema: { type: string } }],
          requestBody:
            {
              required: true,
              content:
                {
                  application/json:
                    { schema: { $ref: '#/components/schemas/AlbumDto' } },
                },
            },
          responses:
            {
              '200':
                {
                  description: 'Successfully updated',
                  content:
                    {
                      application/json:
                        {
                          schema:
                            {
                              type: array,
                              items: { $ref: '#/components/schemas/Album' },
                            },
                        },
                    },
                },
              '400': { description: 'Invalid id or dto' },
              '401': { description: Unauthorized },
              '403': { description: 'Operation forbidden' },
              '404': { description: 'Album not found' },
            },
          tags: [albums],
          security: [{ bearer: [] }],
        },
      delete:
        {
          operationId: AlbumsController_deleteAlbum,
          parameters:
            [{ name: id, required: true, in: path, schema: { type: string } }],
          responses:
            {
              '204': { description: 'Successfully deleted' },
              '400': { description: 'Invalid id' },
              '401': { description: Unauthorized },
              '403': { description: 'Operation forbidden' },
              '404': { description: 'Album not found' },
            },
          tags: [albums],
          security: [{ bearer: [] }],
        },
    }
  /artist:
    {
      get:
        {
          operationId: ArtistsController_getAllArtists,
          parameters: [],
          responses:
            {
              '200':
                {
                  description: 'Successful operation',
                  content:
                    {
                      application/json:
                        {
                          schema:
                            {
                              type: array,
                              items: { $ref: '#/components/schemas/Artist' },
                            },
                        },
                    },
                },
              '401': { description: Unauthorized },
            },
          tags: [artists],
          security: [{ bearer: [] }],
        },
      post:
        {
          operationId: ArtistsController_createArtist,
          parameters: [],
          requestBody:
            {
              required: true,
              content:
                {
                  application/json:
                    { schema: { $ref: '#/components/schemas/ArtistDto' } },
                },
            },
          responses:
            {
              '201':
                {
                  description: 'Successfully created',
                  content:
                    {
                      application/json:
                        { schema: { $ref: '#/components/schemas/Artist' } },
                    },
                },
              '400': { description: 'Invalid dto' },
              '401': { description: Unauthorized },
              '403': { description: 'Operation forbidden' },
            },
          tags: [artists],
          security: [{ bearer: [] }],
        },
    }
  '/artist/{id}':
    {
      get:
        {
          operationId: ArtistsController_getArtistById,
          parameters:
            [{ name: id, required: true, in: path, schema: { type: string } }],
          responses:
            {
              '200':
                {
                  description: 'Successful operation',
                  content:
                    {
                      application/json:
                        { schema: { $ref: '#/components/schemas/Artist' } },
                    },
                },
              '400': { description: 'Invalid id' },
              '401': { description: Unauthorized },
              '404': { description: 'Artist not found' },
            },
          tags: [artists],
          security: [{ bearer: [] }],
        },
      put:
        {
          operationId: ArtistsController_updateArtist,
          parameters:
            [{ name: id, required: true, in: path, schema: { type: string } }],
          requestBody:
            {
              required: true,
              content:
                {
                  application/json:
                    { schema: { $ref: '#/components/schemas/ArtistDto' } },
                },
            },
          responses:
            {
              '200':
                {
                  description: 'Successfully updated',
                  content:
                    {
                      application/json:
                        { schema: { $ref: '#/components/schemas/Artist' } },
                    },
                },
              '400': { description: 'Invalid id or dto' },
              '401': { description: Unauthorized },
              '403': { description: 'Operation forbidden' },
              '404': { description: 'Artist not found' },
            },
          tags: [artists],
          security: [{ bearer: [] }],
        },
      delete:
        {
          operationId: ArtistsController_deleteArtist,
          parameters:
            [{ name: id, required: true, in: path, schema: { type: string } }],
          responses:
            {
              '204': { description: 'Successfully deleted' },
              '400': { description: 'Invalid id' },
              '401': { description: Unauthorized },
              '403': { description: 'Operation forbidden' },
              '404': { description: 'Artist not found' },
            },
          tags: [artists],
          security: [{ bearer: [] }],
        },
    }
  /artist/search:
    {
      get:
        {
          operationId: ArtistsController_getArtistsByName,
          parameters:
            [
              {
                name: name,
                required: true,
                in: query,
                description: 'Name of the artist',
                schema: { type: string },
              },
            ],
          responses:
            {
              '200':
                {
                  description: 'Successful operation',
                  content:
                    {
                      application/json:
                        {
                          schema:
                            {
                              type: array,
                              items: { $ref: '#/components/schemas/Artist' },
                            },
                        },
                    },
                },
              '401': { description: Unauthorized },
            },
          tags: [artists],
          security: [{ bearer: [] }],
        },
    }
  /track:
    {
      get:
        {
          operationId: TracksController_getAllTracks,
          parameters: [],
          responses:
            {
              '200':
                {
                  description: 'Successful operation',
                  content:
                    {
                      application/json:
                        {
                          schema:
                            {
                              type: array,
                              items: { $ref: '#/components/schemas/Track' },
                            },
                        },
                    },
                },
              '401': { description: Unauthorized },
            },
          tags: [tracks],
          security: [{ bearer: [] }],
        },
      post:
        {
          operationId: TracksController_createTrack,
          parameters: [],
          requestBody:
            {
              required: true,
              content:
                {
                  application/json:
                    { schema: { $ref: '#/components/schemas/TrackDto' } },
                },
            },
          responses:
            {
              '201':
                {
                  description: 'Successfully created',
                  content:
                    {
                      application/json:
                        { schema: { $ref: '#/components/schemas/Track' } },
                    },
                },
              '400': { description: 'Invalid dto' },
              '401': { description: Unauthorized },
              '403': { description: 'Operation forbidden' },
            },
          tags: [tracks],
          security: [{ bearer: [] }],
        },
    }
  /track/search:
    {
      get:
        {
          operationId: TracksController_getTracksByName,
          parameters:
            [
              {
                name: name,
                required: true,
                in: query,
                description: 'Name of the track',
                schema: { type: string },
              },
            ],
          responses:
            {
              '200':
                {
                  description: 'Successful operation',
                  content:
                    {
                      application/json:
                        {
                          schema:
                            {
                              type: array,
                              items: { $ref: '#/components/schemas/Track' },
                            },
                        },
                    },
                },
              '401': { description: Unauthorized },
            },
          tags: [tracks],
          security: [{ bearer: [] }],
        },
    }
  '/track/{id}':
    {
      get:
        {
          operationId: TracksController_getTrackById,
          parameters:
            [{ name: id, required: true, in: path, schema: { type: string } }],
          responses:
            {
              '200':
                {
                  description: 'Successful operation',
                  content:
                    {
                      application/json:
                        { schema: { $ref: '#/components/schemas/Track' } },
                    },
                },
              '400': { description: 'Invalid id' },
              '401': { description: Unauthorized },
              '404': { description: 'Track not found' },
            },
          tags: [tracks],
          security: [{ bearer: [] }],
        },
      put:
        {
          operationId: TracksController_updateTrack,
          parameters:
            [{ name: id, required: true, in: path, schema: { type: string } }],
          requestBody:
            {
              required: true,
              content:
                {
                  application/json:
                    { schema: { $ref: '#/components/schemas/TrackDto' } },
                },
            },
          responses:
            {
              '200':
                {
                  description: 'Successfully updated',
                  content:
                    {
                      application/json:
                        { schema: { $ref: '#/components/schemas/Track' } },
                    },
                },
              '400': { description: 'Invalid id or dto' },
              '401': { description: Unauthorized },
              '403': { description: 'Operation forbidden' },
              '404': { description: 'Track not found' },
            },
          tags: [tracks],
          security: [{ bearer: [] }],
        },
      delete:
        {
          operationId: TracksController_deleteTrack,
          parameters:
            [{ name: id, required: true, in: path, schema: { type: string } }],
          responses:
            {
              '204': { description: 'Successfully deleted' },
              '400': { description: 'Invalid id' },
              '401': { description: Unauthorized },
              '403': { description: 'Operation forbidden' },
              '404': { description: 'Album not found' },
            },
          tags: [tracks],
          security: [{ bearer: [] }],
        },
    }
  /auth/login:
    {
      post:
        {
          operationId: AuthController_signIn,
          parameters: [],
          responses:
            {
              '200':
                {
                  description: 'Successfully signed in',
                  content:
                    {
                      application/json:
                        {
                          schema:
                            { $ref: '#/components/schemas/GetTokensResponse' },
                        },
                    },
                },
              '401': { description: 'Incorrect login or password' },
            },
          tags: [authentication],
        },
    }
  /auth/signup:
    {
      post:
        {
          operationId: AuthController_signUp,
          parameters: [],
          requestBody:
            {
              required: true,
              content:
                {
                  application/json:
                    { schema: { $ref: '#/components/schemas/CreateUserDto' } },
                },
            },
          responses:
            {
              '201':
                {
                  description: 'Successfully signed up. To continue, please, confirm your email',
                  content:
                    {
                      application/json:
                        { schema: { $ref: '#/components/schemas/User' } },
                    },
                },
              '400': { description: 'Invalid dto' },
              '409': { description: 'Login or email already in use' },
            },
          tags: [authentication],
        },
    }
  /auth/refresh:
    {
      post:
        {
          operationId: AuthController_refresh,
          parameters: [],
          responses:
            {
              '200':
                {
                  description: 'Successfully refreshed',
                  content:
                    {
                      application/json:
                        {
                          schema:
                            { $ref: '#/components/schemas/GetTokensResponse' },
                        },
                    },
                },
              '401': { description: Unauthorized },
              '403': { description: 'Operation forbidden' },
            },
          tags: [authentication],
          security: [{ bearer: [] }],
        },
    }
  /auth/confirm:
    {
      get:
        {
          operationId: AuthController_confirmUserEmail,
          parameters:
            [
              {
                name: token,
                required: true,
                in: query,
                description: 'Email confirmation token',
                schema: {},
              },
            ],
          responses:
            {
              '200':
                {
                  description: 'Successfully confirmed',
                  content:
                    {
                      application/json:
                        {
                          schema:
                            { $ref: '#/components/schemas/GetTokensResponse' },
                        },
                    },
                },
              '401': { description: Unauthorized },
              '403': { description: 'Operation forbidden' },
            },
          tags: [authentication],
        },
    }
info:
  title: 'Home Library'
  description: 'Home music library service'
  version: 1.0.0
  contact: {}
tags: []
servers: []
components:
  securitySchemes: { bearer: { scheme: bearer, bearerFormat: JWT, type: http } }
  schemas:
    {
      User:
        {
          type: object,
          properties:
            {
              id: { type: string },
              login: { type: string },
              email: { type: string },
              emailIsConfirmed: { type: boolean },
              version: { type: number },
              createdAt: { type: number },
              updatedAt: { type: number },
              role: { type: string },
            },
          required:
            [
              id,
              login,
              email,
              emailIsConfirmed,
              version,
              createdAt,
              updatedAt,
              role,
            ],
        },
      UpdatePasswordDto:
        {
          type: object,
          properties:
            { oldPassword: { type: string }, newPassword: { type: string } },
          required: [oldPassword, newPassword],
        },
      FindFavsDto:
        {
          type: object,
          properties: { userId: { type: string } },
          required: [userId],
        },
      Favourites:
        {
          type: object,
          properties:
            {
              id: { type: string },
              tracks: { type: array, items: { type: string } },
              artists: { type: array, items: { type: string } },
              albums: { type: array, items: { type: string } },
            },
          required: [id, tracks, artists, albums],
        },
      Album:
        {
          type: object,
          properties:
            {
              id: { type: string },
              name: { type: string },
              year: { type: number },
              artistId: { type: string },
            },
          required: [id, name, year, artistId],
        },
      AlbumDto:
        {
          type: object,
          properties:
            {
              name: { type: string },
              year: { type: number },
              artistId: { type: string },
            },
          required: [name, year],
        },
      Artist:
        {
          type: object,
          properties:
            {
              id: { type: string },
              name: { type: string },
              grammy: { type: boolean },
            },
          required: [id, name, grammy],
        },
      ArtistDto:
        {
          type: object,
          properties: { name: { type: string }, grammy: { type: boolean } },
          required: [name, grammy],
        },
      Track:
        {
          type: object,
          properties:
            {
              id: { type: string },
              name: { type: string },
              duration: { type: number },
              artistId: { type: string },
              albumId: { type: string },
            },
          required: [id, name, duration, artistId, albumId],
        },
      TrackDto:
        {
          type: object,
          properties:
            {
              name: { type: string },
              artistId: { type: string },
              albumId: { type: string },
              duration: { type: number },
            },
          required: [name, duration],
        },
      GetTokensResponse:
        {
          type: object,
          properties:
            { accessToken: { type: string }, refreshToken: { type: string } },
          required: [accessToken, refreshToken],
        },
      CreateUserDto:
        {
          type: object,
          properties:
            {
              login: { type: string },
              email: { type: string },
              password: { type: string },
            },
          required: [login, email, password],
        },
    }
